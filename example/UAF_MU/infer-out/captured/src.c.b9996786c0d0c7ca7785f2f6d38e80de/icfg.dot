/* @generated */
digraph cfg {
"main.fad58de7366495db4650cfefac2fcd61_1" [label="1: Start main\nFormals: \nLocals:  i:int p:int* v:int c:int \n   DECLARE_LOCALS(&return,&i,&p,&v,&c); [line 3, column 1]\n " color=yellow style=filled]
	

	 "main.fad58de7366495db4650cfefac2fcd61_1" -> "main.fad58de7366495db4650cfefac2fcd61_16" ;
"main.fad58de7366495db4650cfefac2fcd61_2" [label="2: Exit main \n  " color=yellow style=filled]
	

"main.fad58de7366495db4650cfefac2fcd61_3" [label="3:  Return Stmt \n   *&return:int=0 [line 15, column 3]\n " shape="box"]
	

	 "main.fad58de7366495db4650cfefac2fcd61_3" -> "main.fad58de7366495db4650cfefac2fcd61_2" ;
"main.fad58de7366495db4650cfefac2fcd61_4" [label="4: + \n  " ]
	

	 "main.fad58de7366495db4650cfefac2fcd61_4" -> "main.fad58de7366495db4650cfefac2fcd61_7" ;
"main.fad58de7366495db4650cfefac2fcd61_5" [label="5:  DeclStmt \n   *&i:int=0 [line 8, column 8]\n " shape="box"]
	

	 "main.fad58de7366495db4650cfefac2fcd61_5" -> "main.fad58de7366495db4650cfefac2fcd61_4" ;
"main.fad58de7366495db4650cfefac2fcd61_6" [label="6:  UnaryOperator \n   n$0=*&i:int [line 8, column 23]\n  *&i:int=(n$0 + 1) [line 8, column 23]\n " shape="box"]
	

	 "main.fad58de7366495db4650cfefac2fcd61_6" -> "main.fad58de7366495db4650cfefac2fcd61_4" ;
"main.fad58de7366495db4650cfefac2fcd61_7" [label="7:  BinaryOperatorStmt: LT \n   n$1=*&i:int [line 8, column 17]\n " shape="box"]
	

	 "main.fad58de7366495db4650cfefac2fcd61_7" -> "main.fad58de7366495db4650cfefac2fcd61_8" ;
	 "main.fad58de7366495db4650cfefac2fcd61_7" -> "main.fad58de7366495db4650cfefac2fcd61_9" ;
"main.fad58de7366495db4650cfefac2fcd61_8" [label="8: Prune (true branch, for loop) \n   PRUNE((n$1 < 10), true); [line 8, column 17]\n " shape="invhouse"]
	

	 "main.fad58de7366495db4650cfefac2fcd61_8" -> "main.fad58de7366495db4650cfefac2fcd61_11" ;
"main.fad58de7366495db4650cfefac2fcd61_9" [label="9: Prune (false branch, for loop) \n   PRUNE(!(n$1 < 10), false); [line 8, column 17]\n " shape="invhouse"]
	

	 "main.fad58de7366495db4650cfefac2fcd61_9" -> "main.fad58de7366495db4650cfefac2fcd61_3" ;
"main.fad58de7366495db4650cfefac2fcd61_10" [label="10: + \n  " ]
	

	 "main.fad58de7366495db4650cfefac2fcd61_10" -> "main.fad58de7366495db4650cfefac2fcd61_6" ;
"main.fad58de7366495db4650cfefac2fcd61_11" [label="11:  BinaryOperatorStmt: Sub \n   n$2=*&p:int* [line 10, column 10]\n  n$3=*n$2:int [line 10, column 9]\n  n$4=*&i:int [line 10, column 14]\n " shape="box"]
	

	 "main.fad58de7366495db4650cfefac2fcd61_11" -> "main.fad58de7366495db4650cfefac2fcd61_12" ;
	 "main.fad58de7366495db4650cfefac2fcd61_11" -> "main.fad58de7366495db4650cfefac2fcd61_13" ;
"main.fad58de7366495db4650cfefac2fcd61_12" [label="12: Prune (true branch, if) \n   PRUNE((n$3 - n$4), true); [line 10, column 9]\n " shape="invhouse"]
	

	 "main.fad58de7366495db4650cfefac2fcd61_12" -> "main.fad58de7366495db4650cfefac2fcd61_6" ;
"main.fad58de7366495db4650cfefac2fcd61_13" [label="13: Prune (false branch, if) \n   PRUNE(!(n$3 - n$4), false); [line 10, column 9]\n " shape="invhouse"]
	

	 "main.fad58de7366495db4650cfefac2fcd61_13" -> "main.fad58de7366495db4650cfefac2fcd61_14" ;
"main.fad58de7366495db4650cfefac2fcd61_14" [label="14:  Call _fun_free \n   n$6=*&p:int* [line 13, column 13]\n  n$7=_fun_free(n$6:int*) [line 13, column 7]\n " shape="box"]
	

	 "main.fad58de7366495db4650cfefac2fcd61_14" -> "main.fad58de7366495db4650cfefac2fcd61_10" ;
"main.fad58de7366495db4650cfefac2fcd61_15" [label="15:  BinaryOperatorStmt: Assign \n   n$10=*&p:int* [line 6, column 4]\n  *n$10:int=5 [line 6, column 3]\n " shape="box"]
	

	 "main.fad58de7366495db4650cfefac2fcd61_15" -> "main.fad58de7366495db4650cfefac2fcd61_5" ;
"main.fad58de7366495db4650cfefac2fcd61_16" [label="16:  DeclStmt \n   n$11=_fun_malloc(4:unsigned long) [line 5, column 12]\n  *&p:int*=n$11 [line 5, column 3]\n " shape="box"]
	

	 "main.fad58de7366495db4650cfefac2fcd61_16" -> "main.fad58de7366495db4650cfefac2fcd61_15" ;
}
